// ********RoostGPT********
/*
Test generated by RoostGPT for test testingGoCoverage using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=Display_7bd7d90a9f
ROOST_METHOD_SIG_HASH=Display_679751592e

================================VULNERABILITIES================================
Vulnerability: Data Leakage
Issue: If the linked list contains sensitive information, printing it to the standard output could expose it to unauthorized parties.
Solution: Avoid logging or printing sensitive data. If it's necessary to display the data for debugging purposes, make sure it's done in a secure environment.

================================================================================
Scenario 1: Test with empty linked list

Details:
  Description: This test is meant to check the functionality of the Display method when the linked list is empty. As the linked list is empty, no values should be printed.
Execution:
  Arrange: Create an instance of LinkedList with head as nil.
  Act: Invoke the Display() method on the created LinkedList instance.
  Assert: Use Go testing facilities to verify that no values are printed.
Validation:
  The choice of assertion is based on the logic that if the linked list is empty, no values should be printed. This test is important as it checks the functionality of the Display method in edge cases.

Scenario 2: Test with single node linked list

Details:
  Description: This test is meant to check the functionality of the Display method when the linked list has only one node. The value of that single node should be printed.
Execution:
  Arrange: Create an instance of LinkedList with head as a single node.
  Act: Invoke the Display() method on the created LinkedList instance.
  Assert: Use Go testing facilities to verify that the value of the single node is printed.
Validation:
  The choice of assertion is based on the logic that if the linked list has only one node, the value of that node should be printed. This test is important as it checks the functionality of the Display method in a minimal scenario.

Scenario 3: Test with multiple nodes linked list

Details:
  Description: This test is meant to check the functionality of the Display method when the linked list has multiple nodes. The values of all nodes should be printed in the order they appear in the linked list.
Execution:
  Arrange: Create an instance of LinkedList with head as the first node of multiple nodes.
  Act: Invoke the Display() method on the created LinkedList instance.
  Assert: Use Go testing facilities to verify that the values of all nodes are printed in order.
Validation:
  The choice of assertion is based on the logic that if the linked list has multiple nodes, the values of all nodes should be printed in the order they appear in the list. This test is important as it checks the functionality of the Display method in a normal operation scenario.
*/

// ********RoostGPT********
package LinkedList

import (
	"bytes"
	"fmt"
	"testing"
)

type node struct {
	val  int
	next *node
}

type LinkedList struct {
	head *node
}

func (ll *LinkedList) Display() {
	for cur := ll.head; cur != nil; cur = cur.next {
		fmt.Print(cur.val, " ")
	}
	fmt.Print("\n")
}

func TestDisplay(t *testing.T) {
	tests := []struct {
		name string
		list *LinkedList
		want string
	}{
		{
			name: "Test with empty linked list",
			list: &LinkedList{head: nil},
			want: "\n",
		},
		{
			name: "Test with single node linked list",
			list: &LinkedList{head: &node{val: 1}},
			want: "1 \n",
		},
		{
			name: "Test with multiple nodes linked list",
			list: &LinkedList{head: &node{val: 1, next: &node{val: 2, next: &node{val: 3}}}},
			want: "1 2 3 \n",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			out := new(bytes.Buffer)
			old := stdOut
			stdOut = out
			defer func() { stdOut = old }()

			tt.list.Display()

			got := out.String()
			if got != tt.want {
				t.Errorf("Display() = %v, want %v", got, tt.want)
			}
		})
	}
}
